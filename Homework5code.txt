import numpy as np
# Problem 1
# Power Iteration function
def powiter(A, x, Tol,N):
    A = np.copy(A)
    x = np.copy(x)
    x = x/np.sqrt(np.dot(x,np.transpose(x)))
    lamb = np.dot(x, np.dot(A,np.transpose(x)))
    err = np.dot(np.transpose(np.dot(A, np.transpose(x)) - lamb*np.transpose(x)), np.dot(A, np.transpose(x)) - lamb*np.transpose(x))
    err = np.sqrt(err)
    M = 0
    while err > Tol and M < N:
        M = M+1
        w = np.transpose(np.dot(A,np.transpose(x)))
        x = w/np.sqrt(np.dot(w,np.transpose(w)))
        lamb = np.dot(x, np.dot(A,np.transpose(x)))
        err = np.dot(np.transpose(np.dot(A, np.transpose(x)) - lamb*np.transpose(x)), np.dot(A, np.transpose(x)) - lamb*np.transpose(x))
        err = np.sqrt(err)
    return (lamb, x, M, err)

A = np.array([[-3,-3,-2,-1,0,1], [-3, 0, -1, 0,1,2], [-2,-1,3,1,2,3],[-1,0,1,6,3,4],[0,1,2,3,9,5],[1,2,3,4,5,12]])
x = np.array([[1.0,2.0,3.0,4.0,5.0,6.0]])
x = x/np.sqrt(np.dot(x,np.transpose(x)))
Tol = 10**(-8)
N = 50
lam = powiter(A, x, Tol, N)
print(lam)

# Problem 2
# Inverse Iteration function
def inviter(A, x, mu, Tol, N):
    A = np.copy(A)
    x = np.copy(x)
    I = np.identity(len(A))
    x = x/np.sqrt(np.dot(x,np.transpose(x)))
    lamb = np.dot(x, np.dot(A,np.transpose(x)))
    err = np.dot(np.transpose(np.dot(A, np.transpose(x)) - lamb*np.transpose(x)), np.dot(A, np.transpose(x)) - lamb*np.transpose(x))
    err = np.sqrt(err)
    M = 0
    invmat = np.copy(np.linalg.inv(A - mu*I))
    while err > Tol and M < N:
        M = M+1
        w = np.transpose(np.dot(invmat,np.transpose(x)))
        x = w/np.sqrt(np.dot(w,np.transpose(w)))
        lamb = np.dot(x, np.dot(A,np.transpose(x)))
        err = np.dot(np.transpose(np.dot(A, np.transpose(x)) - lamb*np.transpose(x)), np.dot(A, np.transpose(x)) - lamb*np.transpose(x))
        err = np.sqrt(err)
    return (lamb, x, M, err)

A = np.array([[-3,-3,-2,-1,0,1], [-3, 0, -1, 0,1,2], [-2,-1,3,1,2,3],[-1,0,1,6,3,4],[0,1,2,3,9,5],[1,2,3,4,5,12]])
x = np.array([[1.0,2.0,3.0,4.0,5.0,6.0]])
x = x/np.sqrt(np.dot(x,np.transpose(x)))
Tol = 10**(-8)
N = 50
mu = 3.7
lam2 = inviter(A,x,mu, Tol, N)
print(lam2)

# Problem 3
mu = 4.0
lam3 = inviter(A,x,mu,Tol,N)
print(lam3)

# Problem 4
# function that defines the system in Problem 4
def func1(x):
    y = np.float64(np.array([[0,0,0]]))
    y[0,0] = np.float64(30*x[0,0] -10 + 10*np.cos(0.1*x[0,1]+1))
    y[0,1] = np.float64(20*x[0,1] + 15 + 5*np.sin(0.1*x[0,0] + 0.1*x[0,2]))
    y[0,2] = np.float64(70*x[0,2] - 30 + 5*np.exp(-1*x[0,0]**2))
    return y

x = np.array([[1.0,1.0,1.0]])
eva = func1(x)
err = np.sqrt(np.dot(eva, np.transpose(eva)))
M = 0
while err > 10**(-6):
    M = M+1
    x = x - 0.01*func1(x)
    f = func1(x)
    err = np.sqrt(np.dot(f, np.transpose(f)))
    
print(x)
print(M)
print(err)

# Problem 5 (a)
# function that defines the system in Problem 5
def func2(x):
    y = np.float64(np.array([[0,0,0]]))
    y[0,0] = np.float64(x[0,0] - x[0,1] -10 + 10*np.cos(0.1*x[0,1]))
    y[0,1] = np.float64(2*x[0,0] + x[0,2] -20 + 10*np.sin(0.1*x[0,1]))
    y[0,2] = np.float64(x[0,0] - 0.1*x[0,1] + x[0,2] - 30 + 10*np.exp(-1*x[0,2]**2))
    return y
 x = np.array([[1.0,1.0,1.0]])
eva = func2(x)
err = np.sqrt(np.dot(eva, np.transpose(eva)))
M = 0
while err > 10**(-6):
    M = M+1
    x = x - 0.01*func2(x)
    f = func2(x)
    err = np.sqrt(np.dot(f, np.transpose(f)))
    
print(x)
print(M)
print(err)

# Problem 5(b)
# function that calculates the Jacobian for the function in Problem 5
def jacf2(x):
    J = np.identity(3)
    J[0,0] = np.float64(1 - 10*.1*np.sin(0.1*x[0,0]))
    J[0,1] = np.float64(-1)
    J[0,2] = np.float64(0)
    J[1,0] = np.float64(2)
    J[1,1] = np.float64(10*.1*np.cos(.1*x[0,1]))
    J[1,2] = np.float64(1)
    J[2,0] = np.float64(1)
    J[2,1] = np.float64(-0.1)
    J[2,2] = np.float64(1 -2*x[0,2]*10*np.exp(-1*x[0,2]**2))
    return J

x = np.array([[1.0,1.0,1.0]])
eva = func2(x)
err = np.sqrt(np.dot(eva, np.transpose(eva)))
M = 0
while err > 10**(-6):
    M = M+1
    x = x - np.transpose(np.dot(np.linalg.inv(jacf2(x)) , np.transpose(func2(x))))
    f = func2(x)
    err = np.sqrt(np.dot(f, np.transpose(f)))
    
print(x)
print(M)
print(err)
